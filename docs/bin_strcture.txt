## 文件结构
---------------------+
|      文件头         |
+---------------------+
|     常量池          |
+---------------------+
|     全局变量        |
+---------------------+
|     函数表          |
+---------------------+
|     字节码          |
+---------------------+

1. 文件头 (8字节)
偏移	长度	字段名	描述
0x00	4	魔数	"SBYT" (0x53425954)
0x04	2	版本号	主版本.次版本 (小端)
0x06	2	入口点	主函数在函数表中的索引

2.常量池
+---------------------+---------------------+
| 常量数量 (2字节)    | 常量数据 (变长)      |
+---------------------+---------------------+
每个常量格式：

1字节类型 (0=int, 1=float, 2=bool, 3=string)
值数据：
int: 4字节小端整数
float: 4字节IEEE 754单精度
bool: 1字节 (0=false, 1=true)
string: 2字节长度 + UTF-8字符串

3.全局变量
+---------------------+---------------------+
| 变量数量 (2字节)    | 变量数据 (变长)      |
+---------------------+---------------------+

每个变量格式：

1字节类型 (同上)
2字节名称长度
名称 (UTF-8)
2字节常量池索引 (初始值)

4.函数表
+---------------------+---------------------+
| 函数数量 (2字节)    | 函数数据 (变长)      |
+---------------------+---------------------+

每个函数格式：

2字节名称长度
名称 (UTF-8)
1字节参数数量
1字节局部变量数量
2字节字节码长度
字节码数据 (变长)

5.字节码指令集
所有指令采用统一格式：
+----------------+----------------+
| 操作码 (1字节) | 操作数 (8字节) |
+----------------+----------------+

参见opcode.txt

示例文件结构
源程序：
let count: int = 0;
fn main() {
    while count < 5 {
        print(count);
        count++;
    }
}

文件头: "SBYT" + 版本1.0 + 入口点1

常量池:
  02 00 (2个常量)
  00 00 00 00 00 (int 0)
  00 05 00 00 00 (int 5)

全局变量:
  01 00 (1个变量)
  00 05 00 "count" 00 00 (int类型，名称"count"，初始值常量0)

函数表:
  01 00 (1个函数)
  04 00 "main" (名称长度4，"main")
  00 (参数数量0)
  01 (局部变量数量1 - 循环计数器)
  16 00 (字节码长度22字节)

字节码:
  ...